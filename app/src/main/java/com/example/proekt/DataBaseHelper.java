package com.example.proekt;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.DatabaseUtils;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;public class DataBaseHelper extends SQLiteOpenHelper {    public static final String COL_1 ="ID";    public static final String COL_2 ="email";    public static final String COL_3 ="password";    public DataBaseHelper(Context context) {        super(context, "proekt.sqLiteDatabase", null, 1);    }    @Override    public void onCreate(SQLiteDatabase sqLiteDatabase) {        sqLiteDatabase.execSQL("CREATE TABLE registeruser (ID INTEGER PRIMARY  KEY AUTOINCREMENT, email TEXT, password TEXT)");        sqLiteDatabase.execSQL("Create table city ( cityname text primary key,  citynumber int)");        sqLiteDatabase.execSQL("Create table park(parkName text primary key, cityNamee text,  parkSpaces int, takenSpaces int,lat double, long double)");        sqLiteDatabase.execSQL("Create table reservation(rowid int primary key, userR text, cityR text, parkR text, dateR text, timeR text )");        fillParkWithData(sqLiteDatabase);        fillCityWithData(sqLiteDatabase);    }    @Override    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {        sqLiteDatabase.execSQL(" DROP TABLE IF EXISTS registeruser ");        sqLiteDatabase.execSQL("drop table if exists city ");        sqLiteDatabase.execSQL("drop table if exists park");        sqLiteDatabase.execSQL("drop table if exists reservation");        onCreate(sqLiteDatabase);    }    public long addUser(String email, String password){        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();        ContentValues contentValues = new ContentValues();        contentValues.put("email",email);        contentValues.put("password",password);        long res = sqLiteDatabase.insert("registeruser",null,contentValues);        sqLiteDatabase.close();        return  res;    }    public boolean checkUser(String email, String password){        String[] columns = { COL_1 };        SQLiteDatabase sqLiteDatabase = getReadableDatabase();        String selection = "email" + "=?" + " and " + "password"+ "=?";        String[] selectionArgs = { email, password };        Cursor cursor = sqLiteDatabase.query("registeruser",columns,selection,selectionArgs,null,null,null);        int count = cursor.getCount();        cursor.close();        sqLiteDatabase.close();        if(count>0)            return  true;        else            return  false;    }    public City query(int position) {        String query = "SELECT * FROM city ORDER BY cityname ASC " + "LIMIT " + position + ",1";        Cursor cursor = null;        City entry = new City();        SQLiteDatabase sqLiteDatabase = this.getReadableDatabase();        cursor = sqLiteDatabase.rawQuery(query, null);        cursor.moveToFirst();        entry.setCityName(cursor.getString(cursor.getColumnIndex("cityname")));        entry.setCityNumber(cursor.getColumnIndex("citynumber"));        cursor.close();        return entry;    }    public Parking querypark(int position) {        String query1 = "SELECT * FROM park ORDER BY parkName ASC " +                "LIMIT " + position + ",1";        Cursor cursor = null;        Parking entry = new Parking();        SQLiteDatabase sqLiteDatabase = this.getReadableDatabase();        cursor = sqLiteDatabase.rawQuery(query1, null);        cursor.moveToFirst();        entry.setParkName(cursor.getString(cursor.getColumnIndex("parkName")));        entry.setParkCity(cursor.getString(cursor.getColumnIndex("cityNamee")));        entry.setParkSpaces(cursor.getColumnIndex("parkSpaces"));        entry.setTakenSpaces(cursor.getColumnIndex("takenSpaces"));        cursor.close();        return entry;    }    public void fillCityWithData(SQLiteDatabase sqLiteDatabase) {        String[] cities = {"Скопје", "Велес", "Битола", "Охрид","Штип", "Гевгелија"};        int[] numbers = {5, 3, 2, 3, 3, 4};        // Create a container for the data.        ContentValues values = new ContentValues();        for (int i=0; i < cities.length;i++) {            // Put column/value pairs into the container, overriding existing values.            values.put("cityname", cities[i]);            values.put("citynumber", numbers[i]);            sqLiteDatabase.insert("city", null, values);        }    }    private void fillParkWithData(SQLiteDatabase sqLiteDatabase) {        String[] parkingLots = {"City Mall", "Capitol Mall", "Беко", "26 јули", "Разловечко Востание",                "Центар", "Автобуска Станица", "Железничка Станица",                "Широк Сокак","Т.Ц. Јавор",                "Центар","Билјанини Извори","Горна Порта",                "Автобуска Станица", "8ми Ноември", "Исар",                "Автобуска Станица", "Железничка Станица", "Фламинго", "Центар"        };        String[] cityP= {"Скопје", "Скопје", "Скопје", "Скопје", "Скопје",                "Велес", "Велес", "Велес",                "Битола","Битола",                "Охрид","Охрид","Охрид",                "Штип", "Штип", "Штип",                "Гевгелија", "Гевгелија", "Гевгелија", "Гевгелија"        };        double[] latitude = {42.005864, 41.994514, 41.993442, 41.985663 , 41.996776,                42.128971, 42.135614,                41.718129, 41.713903,                41.737259, 41.741124,                41.143215,                41.439633,                41.343759, 41.344044,                41.026927, 41.030836,                41.117588, 41.112351,                41.796165,                42.007646        };        double[] longitude = {21.392932, 21.437454, 21.422464, 21.465201, 21.437004,                21.718501, 21.728963,                21.772912, 21.785763,                22.190368, 22.189238,                22.512149,                22.639943,                21.551713, 21.540177,                21.333055, 21.334509,                20.798746, 20.799422,                20.908620,                20.968645        };        int[] free = {400, 250, 200, 180, 421,                150, 180,150,                150, 200,                120, 120, 110,                250, 100, 200,                165, 155, 250, 265                };        int taken []= {0, 0, 0, 0, 0,                0, 0, 0,                0, 0,                0, 0, 0,                0, 0, 0,                0, 0, 0, 0};        ContentValues values = new ContentValues();        for (int i=0; i < parkingLots.length;i++) {            // Put column/value pairs into the container, overriding existing values.            values.put("parkName", parkingLots[i]);            values.put("cityNamee", cityP[i]);            values.put("parkSpaces", free[i]);            values.put("takenSpaces", taken[i]);            sqLiteDatabase.insert("park", null, values);        }    }    public long count() {        SQLiteDatabase sqLiteDatabase = this.getReadableDatabase();        return DatabaseUtils.queryNumEntries(this.getReadableDatabase(), "city");    }    public long countpark(){        SQLiteDatabase sqLiteDatabase = this.getReadableDatabase();        return DatabaseUtils.queryNumEntries(this.getReadableDatabase(), "park");    }    public boolean insertReservation(String user, String city, String park, String date, String time){        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();        ContentValues contentValues = new ContentValues();        contentValues.put("userR", user);        contentValues.put("cityR", city);        contentValues.put("parkR", park);        contentValues.put("dateR", date);        contentValues.put("timeR", time);        long ins = sqLiteDatabase.insert("reservation", null, contentValues);        if(ins == -1)            return false;        else return true;    }    public int numberResPerUser(String user){        SQLiteDatabase sqLiteDatabase = this.getReadableDatabase();        Cursor cursor = sqLiteDatabase.rawQuery("Select * from reservation where userR=?", new String[]{user});        int count = 0;        if (cursor.moveToFirst()) {            count = cursor.getCount();            cursor.close();            return count;        } else return 0;    }    public int numberResAtDateTime(String date, String time, String park) {        SQLiteDatabase sqLiteDatabase = this.getReadableDatabase();        Cursor cursor = sqLiteDatabase.rawQuery("Select * from reservation where dateR=? and timeR=? and parkR=?", new String[]{date, time, park});        int number = 0;        if(cursor.moveToFirst()){            number = cursor.getCount();            cursor.close();            return number;        }        else            return 0;    }    public double latitude (String park){        SQLiteDatabase sqLiteDatabase = this.getReadableDatabase();        Cursor cursor = sqLiteDatabase.rawQuery("Select * from park where parkName=?", new String[]{park});        if(cursor.moveToFirst()){            return cursor.getDouble(4);        }else return 0;    }    public double longitude (String park){        SQLiteDatabase sqLiteDatabase = this.getReadableDatabase();        Cursor cursor = sqLiteDatabase.rawQuery("Select * from park where parkName=?", new String[]{park});        if(cursor.moveToFirst()){            return cursor.getDouble(5);        }else return 0;    }}